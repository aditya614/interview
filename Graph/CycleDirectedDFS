#include <iostream>
#include <vector>
using namespace std;

bool hasCycleDFS(vector<vector<int>>& adjList, vector<int>& visited, vector<int>& recursionStack, int v) {
    visited[v] = 1; // Mark the current vertex as visited
    recursionStack[v] = 1; // Push the current vertex to the recursion stack

    // Visit all adjacent vertices of the current vertex
    for (int neighbor : adjList[v]) {
        if (visited[neighbor] == 0) { // If the neighbor is not visited yet
            if (hasCycleDFS(adjList, visited, recursionStack, neighbor)) // Recur for the neighbor
                return true; // If a cycle is found in the subtree rooted at neighbor, return true
        } else if (recursionStack[neighbor] == 1) { // If the neighbor is in the recursion stack
            return true; // It means there's a cycle
        }
    }

    recursionStack[v] = 0; // Pop the current vertex from the recursion stack
    return false; // No cycle found
}

bool hasCycle(vector<vector<int>>& adjList) {
    int V = adjList.size(); // Number of vertices in the graph
    vector<int> visited(V, 0); // Initialize visited array with 0 values
    vector<int> recursionStack(V, 0); // Initialize recursion stack with 0 values

    // Perform DFS traversal from each vertex
    for (int i = 0; i < V; ++i) {
        if (visited[i] == 0) { // If vertex i is not visited yet
            if (hasCycleDFS(adjList, visited, recursionStack, i)) // Recur for the vertex i
                return true; // If a cycle is found in the subtree rooted at vertex i, return true
        }
    }
    return false; // No cycle found
}

int main() {
    int V = 4; // Number of vertices in the graph
    vector<vector<int>> adjList(V); // Initialize adjacency list with V empty vectors

    // Adding edges to the graph
    adjList[0].push_back(1);
    adjList[1].push_back(2);
    adjList[2].push_back(0);
    adjList[2].push_back(3);
    adjList[3].push_back(3);

    // Check if the graph has a cycle
    if (hasCycle(adjList)) {
        cout << "Graph has a cycle." << endl;
    } else {
        cout << "Graph doesn't have a cycle." << endl;
    }

    return 0;
}
