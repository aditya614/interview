#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Function to check if there is a cycle in an undirected graph using BFS
bool hasCycle(vector<vector<int>>& adjList) {
    int V = adjList.size(); // Number of vertices in the graph
    vector<bool> visited(V, false); // Initialize visited array with false values
    queue<pair<int, int>> q; // Initialize a queue for BFS traversal

    for (int i = 0; i < V; ++i) {
        if (!visited[i]) { // If vertex i is not visited yet
            visited[i] = true; // Mark it as visited
            q.push({i, -1}); // Push it onto the queue with its parent as -1

            // Perform BFS traversal
            while (!q.empty()) {
                int currentVertex = q.front().first; // Get the front vertex from the queue
                int parent = q.front().second; // Get its parent
                q.pop(); // Pop the front vertex from the queue

                // Visit all adjacent vertices of the current vertex
                for (int neighbor : adjList[currentVertex]) {
                    if (!visited[neighbor]) { // If the neighbor is not visited yet
                        visited[neighbor] = true; // Mark it as visited
                        q.push({neighbor, currentVertex}); // Push it onto the queue with its parent

                    } else if (neighbor != parent) { // If the neighbor is visited and not the parent
                        // It means there's a cycle
                        return true;
                    }
                }
            }
        }
    }
    return false; // No cycle found
}

int main() {
    int V = 5; // Number of vertices in the graph
    vector<vector<int>> adjList(V); // Initialize adjacency list with V empty vectors

    // Adding edges to the graph
    adjList[0].push_back(1);
    adjList[1].push_back(0);
    adjList[1].push_back(2);
    adjList[2].push_back(1);
    adjList[2].push_back(3);
    adjList[3].push_back(2);
    adjList[3].push_back(4);
    adjList[4].push_back(3);

    // Check if the graph has a cycle
    if (hasCycle(adjList)) {
        cout << "Graph has a cycle." << endl;
    } else {
        cout << "Graph doesn't have a cycle." << endl;
    }

    return 0;
}
