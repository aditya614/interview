#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
using namespace std;

// Function to perform Breadth-First Search (BFS) on a graph represented using adjacency list
void BFS(vector<vector<int>>& adjList, int startVertex) {
    int V = adjList.size(); // Number of vertices in the graph
    vector<bool> visited(V, false); // Initialize visited array with false values
    queue<int> q; // Initialize a queue for BFS traversal

    // Mark the start vertex as visited and enqueue it
    visited[startVertex] = true;
    q.push(startVertex);

    // Perform BFS traversal
    while (!q.empty()) {
        int currentVertex = q.front(); // Get the front vertex from the queue
        cout << currentVertex << " "; // Print the current vertex
        q.pop(); // Remove the front vertex from the queue

        // Visit all adjacent vertices of the current vertex
        for (int neighbor : adjList[currentVertex]) {
            if (!visited[neighbor]) { // If the neighbor is not visited yet
                visited[neighbor] = true; // Mark it as visited
                q.push(neighbor); // Enqueue the neighbor
            }
        }
    }
}

int main() {
    int V = 5; // Number of vertices in the graph
    vector<vector<int>> adjList(V); // Initialize adjacency list with V empty vectors

    // Adding edges to the graph
    adjList[0].push_back(1);
    adjList[0].push_back(4);
    adjList[1].push_back(0);
    adjList[1].push_back(2);
    adjList[1].push_back(3);
    adjList[1].push_back(4);
    adjList[2].push_back(1);
    adjList[2].push_back(3);
    adjList[3].push_back(1);
    adjList[3].push_back(2);
    adjList[3].push_back(4);
    adjList[4].push_back(0);
    adjList[4].push_back(1);
    adjList[4].push_back(3);

    cout << "BFS Traversal starting from vertex 0: ";
    BFS(adjList, 0); // Perform BFS traversal starting from vertex 0

    return 0;
}
