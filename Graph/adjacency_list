#include<iostream>
#include <vector>
using namespace std;

// Function to add an edge to the graph
void addEdge(vector<vector<int>>& adjList, int u, int v) {
    adjList[u].push_back(v); // Add v to the adjacency list of u
    adjList[v].push_back(u); // For undirected graph, add u to the adjacency list of v
}

// Function to print the adjacency list representation of the graph
void printGraph(const vector<vector<int>>& adjList) {
    for (int i = 0; i < adjList.size(); ++i) {
        cout << "Adjacency list of vertex " << i << ": ";
        for (int j = 0; j < adjList[i].size(); ++j) {
            cout << adjList[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int V = 5; // Number of vertices in the graph
    vector<vector<int>> adjList(V); // Initialize adjacency list with V empty vectors

    // Adding edges to the graph
    addEdge(adjList, 0, 1);
    addEdge(adjList, 0, 4);
    addEdge(adjList, 1, 2);
    addEdge(adjList, 1, 3);
    addEdge(adjList, 1, 4);
    addEdge(adjList, 2, 3);
    addEdge(adjList, 3, 4);

    // Printing the adjacency list representation of the graph
    printGraph(adjList);

    return 0;
}
output:
Adjacency list of vertex 0: 1 4 
Adjacency list of vertex 1: 0 2 3 4 
Adjacency list of vertex 2: 1 3 
Adjacency list of vertex 3: 1 2 4 
Adjacency list of vertex 4: 0 1 3 
