#include <iostream>
using namespace std;

// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

// Function to insert a value into a BST
TreeNode* insertIntoBST(TreeNode* root, int val) {
    // If the tree is empty, create a new node and return it
    if (root == nullptr) {
        return new TreeNode(val);
    }
    
    // If the value is less than the current node's value, insert into the left subtree
    if (val < root->val) {
        root->left = insertIntoBST(root->left, val);
    }
    // If the value is greater than or equal to the current node's value, insert into the right subtree
    else {
        root->right = insertIntoBST(root->right, val);
    }
    
    return root;
}

// Function to perform an in-order traversal of a binary tree
void inOrderTraversal(TreeNode* root) {
    if (root == nullptr) return;
    inOrderTraversal(root->left);
    cout << root->val << " ";
    inOrderTraversal(root->right);
}

// Function to delete a binary tree
void deleteTree(TreeNode* root) {
    if (root == nullptr) return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    // Creating an empty binary search tree
    TreeNode* root = nullptr;

    // Inserting elements into the BST
    root = insertIntoBST(root, 5);
    root = insertIntoBST(root, 3);
    root = insertIntoBST(root, 7);
    root = insertIntoBST(root, 1);
    root = insertIntoBST(root, 4);
    root = insertIntoBST(root, 6);
    root = insertIntoBST(root, 8);

    // Printing the in-order traversal of the BST
    cout << "In-order traversal of the BST: ";
    inOrderTraversal(root);
    cout << endl;

    // Delete the binary tree to free memory
    deleteTree(root);

    return 0;
}
