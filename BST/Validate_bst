#include <iostream>
#include <climits>
using namespace std;

// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to validate if a binary tree is a BST
bool isValidBSTUtil(TreeNode* root, long long minVal, long long maxVal) {
    // Base case: an empty tree is a valid BST
    if (root == nullptr) return true;

    // Check if the current node's value is within the valid range
    if (root->val <= minVal || root->val >= maxVal) return false;

    // Recursively check the left and right subtrees
    return isValidBSTUtil(root->left, minVal, root->val) && 
           isValidBSTUtil(root->right, root->val, maxVal);
}

bool isValidBST(TreeNode* root) {
    // Call the utility function with the initial range set to negative and positive infinity
    return isValidBSTUtil(root, LLONG_MIN, LLONG_MAX);
}

// Function to delete a binary tree
void deleteTree(TreeNode* root) {
    if (root == nullptr) return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    // Creating a sample binary tree
    TreeNode* root = new TreeNode(2);
    root->left = new TreeNode(1);
    root->right = new TreeNode(3);

    // Validate whether the binary tree is a BST
    if (isValidBST(root)) {
        cout << "The binary tree is a valid BST." << endl;
    } else {
        cout << "The binary tree is not a valid BST." << endl;
    }

    // Delete the binary tree to free memory
    deleteTree(root);

    return 0;
}
