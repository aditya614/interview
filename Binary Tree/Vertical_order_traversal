#include <iostream>
#include <map>
#include <queue>

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to perform vertical order traversal of a binary tree
void verticalOrderTraversal(TreeNode* root) {
    if (root == nullptr) return;

    // Create a map to store nodes at each vertical level
    map<int, vector<int>> verticalLevels;

    // Create a queue for level-order traversal
    queue<pair<TreeNode*, int>> q;
    q.push({root, 0});

    // Perform level-order traversal
    while (!q.empty()) {
        TreeNode* node = q.front().first;
        int hd = q.front().second;
        q.pop();

        // Store the current node's value at its horizontal distance in the map
        verticalLevels[hd].push_back(node->val);

        // Enqueue left and right child nodes with updated horizontal distances
        if (node->left != nullptr) {
            q.push({node->left, hd - 1});
        }
        if (node->right != nullptr) {
            q.push({node->right, hd + 1});
        }
    }

    // Print nodes at each vertical level
    for (auto it = verticalLevels.begin(); it != verticalLevels.end(); ++it) {
        cout << "Vertical level " << it->first << ": ";
        for (int val : it->second) {
            cout << val << " ";
        }
        cout << endl;
    }
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);
    root->right->left->right = new TreeNode(8);
    root->right->right->right = new TreeNode(9);

    // Perform vertical order traversal
    cout << "Vertical order traversal of the binary tree:" << endl;
    verticalOrderTraversal(root);

    return 0;
}
