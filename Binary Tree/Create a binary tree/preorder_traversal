//iterative

#include <iostream>
#include <stack>

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to perform iterative preorder traversal of a binary tree
void preorderTraversal(TreeNode* root) {
    if (root == nullptr) return;

    stack<TreeNode*> st;
    st.push(root);

    while (!st.empty()) {
        TreeNode* current = st.top();
        st.pop();

        // Process current node
        cout << current->val << " ";

        // Push right child first to stack since it should be processed after left child
        if (current->right != nullptr) {
            st.push(current->right);
        }

        // Push left child to stack
        if (current->left != nullptr) {
            st.push(current->left);
        }
    }
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);

    // Perform preorder traversal
    cout << "Preorder traversal of the binary tree: ";
    preorderTraversal(root);
    cout << endl;

    return 0;
}

//recursive

#include <iostream>

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to perform recursive preorder traversal of a binary tree
void preorderTraversal(TreeNode* root) {
    if (root == nullptr) return;

    // Process current node
    cout << root->val << " ";

    // Traverse left subtree
    preorderTraversal(root->left);

    // Traverse right subtree
    preorderTraversal(root->right);
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);

    // Perform preorder traversal
    cout << "Preorder traversal of the binary tree: ";
    preorderTraversal(root);
    cout << endl;

    return 0;
}
