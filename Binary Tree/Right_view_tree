//recursive
#include <iostream>
#include <vector>

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Recursive function to perform right view traversal of a binary tree
void rightViewHelper(TreeNode* root, int level, vector<int>& result) {
    if (root == nullptr) return;

    // If this is the first node at the current level, add it to the result
    if (result.size() == level) {
        result.push_back(root->val);
    }

    // Recur for right and left subtrees with increased level
    rightViewHelper(root->right, level + 1, result);
    rightViewHelper(root->left, level + 1, result);
}

// Function to find the right view of a binary tree
vector<int> rightView(TreeNode* root) {
    vector<int> result;
    rightViewHelper(root, 0, result);
    return result;
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);
    root->left->left->left = new TreeNode(8);

    // Find the right view of the binary tree
    vector<int> rightViewNodes = rightView(root);

    // Print the right view of the binary tree
    cout << "Right view of the binary tree: ";
    for (int nodeVal : rightViewNodes) {
        cout << nodeVal << " ";
    }
    cout << endl;

    return 0;
}


//iterative
#include <iostream>
#include <queue>

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to print the right view of a binary tree
void rightView(TreeNode* root) {
    if (root == nullptr) return;

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        int size = q.size();

        // Traverse all nodes at current level, the last node of the level is the rightmost node
        for (int i = 0; i < size; ++i) {
            TreeNode* current = q.front();
            q.pop();

            // If it's the last node of this level, print its value
            if (i == size - 1) {
                cout << current->val << " ";
            }

            // Enqueue the left and right child nodes
            if (current->left != nullptr) q.push(current->left);
            if (current->right != nullptr) q.push(current->right);
        }
    }
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->right = new TreeNode(4);
    root->right->right = new TreeNode(5);
    root->left->right->left = new TreeNode(6);
    root->left->right->right = new TreeNode(7);
    root->right->right->left = new TreeNode(8);

    // Print the right view of the binary tree
    cout << "Right view of the binary tree: ";
    rightView(root);
    cout << endl;

    return 0;
}

