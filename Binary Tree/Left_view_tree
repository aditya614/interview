//recursive

#include <iostream>
#include <vector>

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Recursive function to perform left view traversal of a binary tree
void leftViewHelper(TreeNode* root, int level, vector<int>& result) {
    if (root == nullptr) return;

    // If this is the first node at the current level, add it to the result
    if (result.size() == level) {
        result.push_back(root->val);
    }

    // Recur for left and right subtrees with increased level
    leftViewHelper(root->left, level + 1, result);
    leftViewHelper(root->right, level + 1, result);
}

// Function to find the left view of a binary tree
vector<int> leftView(TreeNode* root) {
    vector<int> result;
    leftViewHelper(root, 0, result);
    return result;
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);
    root->right->left->left = new TreeNode(8);

    // Find the left view of the binary tree
    vector<int> leftViewNodes = leftView(root);

    // Print the left view of the binary tree
    cout << "Left view of the binary tree: ";
    for (int nodeVal : leftViewNodes) {
        cout << nodeVal << " ";
    }
    cout << endl;

    return 0;
}

//iterative
#include <iostream>
#include <queue>

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to print the left view of a binary tree
void leftView(TreeNode* root) {
    if (root == nullptr) return;

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        int size = q.size();

        // Flag to keep track of whether the current node is the first node in the level
        bool firstNode = true;

        for (int i = 0; i < size; ++i) {
            TreeNode* current = q.front();
            q.pop();

            // Print the first node encountered at each level (leftmost node)
            if (firstNode) {
                cout << current->val << " ";
                firstNode = false;
            }

            // Enqueue the left and right child nodes
            if (current->left != nullptr) q.push(current->left);
            if (current->right != nullptr) q.push(current->right);
        }
    }
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->right = new TreeNode(4);
    root->right->right = new TreeNode(5);
    root->left->right->left = new TreeNode(6);
    root->left->right->right = new TreeNode(7);
    root->right->right->left = new TreeNode(8);

    // Print the left view of the binary tree
    cout << "Left view of the binary tree: ";
    leftView(root);
    cout << endl;

    return 0;
}

