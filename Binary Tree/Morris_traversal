#include <iostream>
using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

void morrisInOrderTraversal(TreeNode* root) {
    TreeNode* current = root;
    while (current != nullptr) {
        if (current->left == nullptr) {
            cout << current->val << " "; // Visit the node
            current = current->right; // Move to the right child
        } else {
            // Find the rightmost node in the left subtree
            TreeNode* predecessor = current->left;
            while (predecessor->right != nullptr && predecessor->right != current) {
                predecessor = predecessor->right;
            }
            
            if (predecessor->right == nullptr) {
                predecessor->right = current; // Make current the right child of predecessor
                current = current->left; // Move to the left child
            } else {
                // Restore the original tree structure
                predecessor->right = nullptr;
                cout << current->val << " "; // Visit the node
                current = current->right; // Move to the right child
            }
        }
    }
}

// Function to create a new binary tree node
TreeNode* createNode(int val) {
    return new TreeNode(val);
}

// Function to delete a binary tree
void deleteTree(TreeNode* root) {
    if (root == nullptr) return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    // Creating a sample binary tree
    TreeNode* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);

    cout << "In-order traversal using Morris traversal: ";
    morrisInOrderTraversal(root);
    cout << endl;

    // Delete the binary tree to free memory
    deleteTree(root);
    
    return 0;
}
