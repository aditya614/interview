#include <iostream>
#include <queue>
#include <stack>

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to perform zigzag traversal of a binary tree
void zigzagTraversal(TreeNode* root) {
    if (root == nullptr) return;

    queue<TreeNode*> q;
    q.push(root);
    bool reverse = false;

    while (!q.empty()) {
        int size = q.size();
        stack<int> levelValues;

        for (int i = 0; i < size; ++i) {
            TreeNode* current = q.front();
            q.pop();

            if (reverse) {
                levelValues.push(current->val);
            } else {
                cout << current->val << " ";
            }

            if (current->left != nullptr) q.push(current->left);
            if (current->right != nullptr) q.push(current->right);
        }

        while (!levelValues.empty()) {
            cout << levelValues.top() << " ";
            levelValues.pop();
        }

        reverse = !reverse;
    }
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);

    // Perform zigzag traversal
    cout << "Zigzag traversal of the binary tree: ";
    zigzagTraversal(root);
    cout << endl;

    return 0;
}
