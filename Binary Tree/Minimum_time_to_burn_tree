#include <iostream>
#include <unordered_map>
#include <algorithm>

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to find the minimum time to burn a binary tree
int minTimeToBurn(TreeNode* root, TreeNode* target, unordered_map<TreeNode*, TreeNode*>& parent, int& maxTime) {
    if (root == nullptr) return 0;

    // Update parent mapping
    if (root->left) parent[root->left] = root;
    if (root->right) parent[root->right] = root;

    // Check if the current node is the target
    if (root == target) {
        if (root->left) {
            maxTime = max(maxTime, 1 + minTimeToBurn(root->left, nullptr, parent, maxTime));
        }
        if (root->right) {
            maxTime = max(maxTime, 1 + minTimeToBurn(root->right, nullptr, parent, maxTime));
        }
        return 1;
    }

    // Check if the target is in the left subtree
    int leftTime = minTimeToBurn(root->left, target, parent, maxTime);
    if (leftTime > 0) {
        maxTime = max(maxTime, 1 + leftTime + minTimeToBurn(root->right, nullptr, parent, maxTime));
        return leftTime + 1;
    }

    // Check if the target is in the right subtree
    int rightTime = minTimeToBurn(root->right, target, parent, maxTime);
    if (rightTime > 0) {
        maxTime = max(maxTime, 1 + rightTime + minTimeToBurn(root->left, nullptr, parent, maxTime));
        return rightTime + 1;
    }

    return 0;
}

// Function to find the minimum time to burn a binary tree starting from a leaf node
int minTimeToBurn(TreeNode* root, TreeNode* leaf) {
    if (root == nullptr || leaf == nullptr) return 0;

    // Parent mapping to find the parent of each node
    unordered_map<TreeNode*, TreeNode*> parent;
    parent[root] = nullptr;

    // Find the time to burn the tree
    int maxTime = 0;
    minTimeToBurn(root, leaf, parent, maxTime);

    return maxTime;
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);

    TreeNode* leaf = root->left->right; // Leaf node to start burning from

    // Find the minimum time to burn the tree
    int minTime = minTimeToBurn(root, leaf);
    cout << "Minimum time to burn the tree: " << minTime << endl;

    return 0;
}
