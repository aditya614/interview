#include <iostream>
#include <algorithm> // for max function

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to calculate the height of a binary tree
int heightOfTree(TreeNode* root) {
    if (root == nullptr) return 0;
    
    // Calculate the height of the left and right subtrees recursively
    int leftHeight = heightOfTree(root->left);
    int rightHeight = heightOfTree(root->right);
    
    // Return the maximum height of the left and right subtrees, plus 1 for the current node
    return max(leftHeight, rightHeight) + 1;
}

// Function to calculate the diameter of a binary tree
int diameterOfTree(TreeNode* root) {
    if (root == nullptr) return 0;
    
    // Calculate the height of the left and right subtrees recursively
    int leftHeight = heightOfTree(root->left);
    int rightHeight = heightOfTree(root->right);
    
    // Calculate the diameter passing through the root node
    int diameterThroughRoot = leftHeight + rightHeight;
    
    // Calculate the diameter of the left and right subtrees recursively
    int leftDiameter = diameterOfTree(root->left);
    int rightDiameter = diameterOfTree(root->right);
    
    // Return the maximum of the diameter through the root and the diameters of the left and right subtrees
    return max(diameterThroughRoot, max(leftDiameter, rightDiameter));
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);

    // Calculate the diameter of the tree
    cout << "Diameter of the tree: " << diameterOfTree(root) << endl;

    return 0;
}
