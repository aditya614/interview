#include <iostream>

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to find the LCA of two nodes in a binary tree
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    // Base case: If the root is null or equal to one of the nodes, return the root
    if (root == nullptr || root == p || root == q) {
        return root;
    }

    // Recursively search for the LCA in the left and right subtrees
    TreeNode* leftLCA = lowestCommonAncestor(root->left, p, q);
    TreeNode* rightLCA = lowestCommonAncestor(root->right, p, q);

    // If both left and right subtrees return non-null values, then the current node is the LCA
    if (leftLCA && rightLCA) {
        return root;
    }

    // If only one subtree returns a non-null value, return that value
    return (leftLCA != nullptr) ? leftLCA : rightLCA;
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(3);
    root->left = new TreeNode(5);
    root->right = new TreeNode(1);
    root->left->left = new TreeNode(6);
    root->left->right = new TreeNode(2);
    root->right->left = new TreeNode(0);
    root->right->right = new TreeNode(8);
    root->left->right->left = new TreeNode(7);
    root->left->right->right = new TreeNode(4);

    // Define the nodes for which we want to find the LCA
    TreeNode* p = root->left;
    TreeNode* q = root->right;

    // Find the LCA of the given nodes
    TreeNode* lcaNode = lowestCommonAncestor(root, p, q);

    // Print the value of the LCA node
    cout << "Lowest Common Ancestor of " << p->val << " and " << q->val << " is: " << lcaNode->val << endl;

    return 0;
}
