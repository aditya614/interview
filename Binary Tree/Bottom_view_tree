#include <iostream>
#include <map>
#include <queue>

using namespace std;

// Definition of a tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to find the bottom view of a binary tree
void bottomView(TreeNode* root) {
    if (root == nullptr) return;

    // Create a map to store the horizontal distance of each node from the root
    map<int, int> verticalLevels;

    // Create a queue for level-order traversal
    queue<pair<TreeNode*, int>> q;
    q.push({root, 0});

    // Perform level-order traversal
    while (!q.empty()) {
        TreeNode* node = q.front().first;
        int hd = q.front().second;
        q.pop();

        // Update the horizontal distance of the current node in the map
        verticalLevels[hd] = node->val;

        // Enqueue left and right child nodes with updated horizontal distances
        if (node->left != nullptr) {
            q.push({node->left, hd - 1});
        }
        if (node->right != nullptr) {
            q.push({node->right, hd + 1});
        }
    }

    // Print the bottom view of the binary tree
    for (auto it = verticalLevels.begin(); it != verticalLevels.end(); ++it) {
        cout << it->second << " ";
    }
}

int main() {
    // Constructing the binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);

    // Find the bottom view of the binary tree
    cout << "Bottom view of the binary tree: ";
    bottomView(root);
    cout << endl;

    return 0;
}
